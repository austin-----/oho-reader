import store from 'store/dist/store.legacy';

var StoreJS = function(store) {
    this.base = _SETTING_API_;
    this.storejs = store;
    this.toSave = new Map();
    this.sync = [];

    this.get = function(key) {

        var value = this.storejs.get(key);

        if (this.sync.indexOf(key) == -1) {
            value = null;
            this.sync.push(key);
        }
        
        if (!value || (Array.isArray(value) && value.length == 0)) {
            var cv = this.getRemote(key);
            if (cv) {
                value = cv;
            }
        }
        if (value) {
            this.setStore(key, value);
        }
        return value;
    }

    this.set = function(key, value) {
        this.setRemote(key, value);
        return this.setStore(key, value);
    }

    this.setStore = function(key, value) {
        try {
            return this.storejs.set(key, value);
        } catch (e) {
            return true;
        }
    }

    this.getRemote = function(key) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', this.base + key, false);  // synchronous request
        xhr.send(null);
        var value = JSON.parse(xhr.responseText);
        return value;
    }

    this.setRemote = function(key, value) {
        this.cancelSave();
        this.toSave.set(key, value);
        this.scheduleSave(10000);
    }

    this.scheduleSave = function (timeout) {
        var self = this;
        this.job = setTimeout(function() { self.toSave.forEach((v,k,m) => self.setJob(k, v)); self.toSave.clear();}, timeout);
    }

    this.cancelSave = function() {
        if (this.job) {
            clearTimeout(this.job);
        }
    }

    this.setJob = function(key, value) {
        var xhr = new XMLHttpRequest();
        xhr.open('PUT', this.base + key);  // synchronous request
        xhr.setRequestHeader('Content-type','application/json; charset=utf-8');
        xhr.send(JSON.stringify(value));
        return '';
    }
};

export default new StoreJS(store);